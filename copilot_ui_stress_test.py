#!/usr/bin/env python3
"""
Microsoft Copilot UI Stress Test Script

This script automates sending messages to the Microsoft Copilot for Windows app
to stress-test its performance and stability through bilingual conversation simulation.

Prerequisites:
- Install the required library: pip install pywinauto
- Microsoft Copilot for Windows app must be running before executing this script
"""

# Import necessary libraries
import time
import random
from pywinauto import Application
from pywinauto.findbestmatch import MatchError
from pywinauto.findwindows import ElementNotFoundError

# =============================================================================
# CONFIGURATION SECTION - USER EDITABLE PARAMETERS
# =============================================================================

# Number of messages to send during the stress test
NUMBER_OF_MESSAGES = 50

# Wait time in seconds between sending messages
WAIT_TIME_SECONDS = 3

# Bilingual sample messages including English and Norwegian with special characters (√¶, √∏, √•)
# and emojis/combined emojis
SAMPLE_MESSAGES = [
    # English messages with emojis
    "Hello! How are you today? üòä",
    "Can you help me with a coding problem? ü§îüíª",
    "What's the weather like? ‚òÄÔ∏èüå§Ô∏è‚õÖ",
    "I'm working on a Python project üêç‚ú®",
    "This is a stress test message üß™‚ö°",
    "Thank you for your assistance! üôèüòä",
    "Can you explain machine learning? ü§ñüìö",
    "I love programming! üíñüë®‚Äçüíª",
    "Have a great day! üåüüí´",
    "Testing the UI automation üîß‚öôÔ∏è",
    
    # Norwegian messages with special characters (√¶, √∏, √•) and emojis
    "Hei! Hvordan har du det i dag? üòäüá≥üá¥",
    "Kan du hjelpe meg med et kodeproblem? ü§îüíª",
    "Hvordan er v√¶ret? ‚òÄÔ∏è‚ùÑÔ∏è",
    "Jeg jobber med et Python-prosjekt üêç‚ú®",
    "Dette er en stresstest-melding üß™‚ö°",
    "Tusen takk for hjelpen! üôèüòä",
    "Kan du forklare maskinl√¶ring? ü§ñüìö",
    "Jeg elsker √• programmere! üíñüë®‚Äçüíª",
    "Ha en flott dag! üåüüí´",
    "Tester UI-automatisering üîß‚öôÔ∏è",
    "Jeg bor i Norge üá≥üá¥üèîÔ∏è",
    "Kaffe og kode er bra üòä‚òïüíª",
    "R√∏dt, gult og gr√∏nt üî¥üü°üü¢",
    "√Ürlighet, √∏l og √•penhet üç∫üí≠",
    "Bj√∏rn g√•r p√• l√∏rdagstur üêªüö∂‚Äç‚ôÇÔ∏è",
    
    # More complex messages mixing languages
    "Hello! Jeg snakker b√•de engelsk og norsk üåçüó£Ô∏è",
    "Machine learning og kunstig intelligens ü§ñüß†",
    "Python programming med √¶, √∏, √• karakterer üêçüìù"
]

# =============================================================================
# UI ELEMENT IDENTIFIERS - PLACEHOLDER VALUES
# =============================================================================
# ‚ö†Ô∏è  IMPORTANT: THESE ARE PLACEHOLDER VALUES! ‚ö†Ô∏è
# 
# You MUST find the correct identifiers for your specific system before running this script.
# Use one of these methods to find the correct identifiers:
# 
# Method 1: Uncomment the window.print_control_identifiers() line in the main() function
#           to print a tree of all available UI elements to the console.
# 
# Method 2: Use Microsoft's Inspect.exe tool (comes with Windows SDK)
#           to inspect the Copilot application and find the correct element identifiers.
# 
# Method 3: Use pywinauto's inspection capabilities or other UI automation tools.
# 
# Replace these placeholder values with the actual identifiers from your system:

# Main window identifier - try window title or process name
COPILOT_WINDOW_TITLE = "Copilot"  # Placeholder: Replace with actual window title

# Text input field identifier - could be AutomationId, control type, or name
TEXT_BOX_AUTO_ID = "TextInput"  # Placeholder: Replace with actual text box identifier

# Send button identifier - could be AutomationId, control type, or name  
SEND_BUTTON_AUTO_ID = "SendButton"  # Placeholder: Replace with actual send button identifier

# Alternative identifiers to try if the above don't work
ALT_TEXT_BOX_CONTROL_TYPE = "Edit"  # Alternative: Control type for text input
ALT_SEND_BUTTON_NAME = "Send"  # Alternative: Button name or visible text


def main():
    """
    Main function containing the core automation logic.
    """
    print("üöÄ Starting Microsoft Copilot UI Stress Test")
    print(f"üìä Configuration: {NUMBER_OF_MESSAGES} messages, {WAIT_TIME_SECONDS}s wait time")
    print("="*60)
    
    try:
        # Attempt to connect to the Copilot application window
        print("üîó Connecting to Microsoft Copilot window...")
        app = Application(backend="uia").connect(title=COPILOT_WINDOW_TITLE)
        window = app.window(title=COPILOT_WINDOW_TITLE)
        
        print("‚úÖ Successfully connected to Copilot window")
        
        # DEBUGGING HELPER: Uncomment the line below to print all available UI elements
        # This will help you find the correct identifiers for your system
        # window.print_control_identifiers()
        
        # Main automation loop
        print(f"üîÑ Starting message sending loop...")
        
        for i in range(1, NUMBER_OF_MESSAGES + 1):
            try:
                print(f"üìù Sending message {i} of {NUMBER_OF_MESSAGES}")
                
                # Select a random message from our sample list
                message = random.choice(SAMPLE_MESSAGES)
                print(f"üí¨ Selected message: {message[:50]}{'...' if len(message) > 50 else ''}")
                
                # Find the text input field
                try:
                    text_box = window.child_window(auto_id=TEXT_BOX_AUTO_ID)
                except ElementNotFoundError:
                    # Try alternative identifier if the first one fails
                    print("‚ö†Ô∏è  Primary text box identifier failed, trying alternative...")
                    text_box = window.child_window(control_type=ALT_TEXT_BOX_CONTROL_TYPE)
                
                # Clear any existing text and type the new message
                text_box.click_input()
                text_box.type_keys("^a")  # Select all existing text
                text_box.type_keys(message)
                
                print("‚úèÔ∏è  Message typed into text box")
                
                # Find and click the send button
                try:
                    send_button = window.child_window(auto_id=SEND_BUTTON_AUTO_ID)
                except ElementNotFoundError:
                    # Try alternative identifier if the first one fails
                    print("‚ö†Ô∏è  Primary send button identifier failed, trying alternative...")
                    send_button = window.child_window(name=ALT_SEND_BUTTON_NAME)
                
                send_button.click()
                print("üöÄ Send button clicked")
                
                # Wait before sending the next message
                if i < NUMBER_OF_MESSAGES:  # Don't wait after the last message
                    print(f"‚è≥ Waiting {WAIT_TIME_SECONDS} seconds before next message...")
                    time.sleep(WAIT_TIME_SECONDS)
                
            except ElementNotFoundError as e:
                print(f"‚ùå Error finding UI element for message {i}: {e}")
                print("üí° Tip: Check your UI element identifiers in the configuration section")
                print("üí° Tip: Uncomment window.print_control_identifiers() to debug")
                continue
                
            except Exception as e:
                print(f"‚ùå Unexpected error for message {i}: {e}")
                continue
        
        print("="*60)
        print("üéâ Stress test completed successfully!")
        print(f"üìä Sent {NUMBER_OF_MESSAGES} messages to Microsoft Copilot")
        
    except MatchError:
        print("‚ùå Error: Could not find Microsoft Copilot window")
        print("üí° Make sure Microsoft Copilot is running and the window title is correct")
        print(f"üí° Current window title setting: '{COPILOT_WINDOW_TITLE}'")
        print("üí° You may need to update COPILOT_WINDOW_TITLE in the configuration section")
        return
        
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        print("üí° Check that Microsoft Copilot is running and accessible")
        return


if __name__ == "__main__":
    main()